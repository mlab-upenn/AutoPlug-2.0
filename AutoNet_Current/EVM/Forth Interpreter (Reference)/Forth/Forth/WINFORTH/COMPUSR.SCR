\ NATIVE CODE COMPILER FOR UR/FORTH              10:46 03/17/87                                                                                                                                 THE NATIVE CODE COMPILER, THE RUN SUPPORT PACKAGE, AND THE      LOAD SCREENS SUPPLIED ON THIS DISK ARE                          COPYRIGHT (C) 1986-1987 BY THOMAS ALMY.  ALL RIGHTS RESERVED.                                                                   THE PURCHASER IS GIVEN PERMISSION TO INCORPORATE THE RUN        SUPPORT PACKAGE INTO HIS/HER PROGRAMS.  THIS PERMISSION         IS NOT EXTENDED TO THE NATIVE CODE COMPILER ITSELF.  THE        TRANSIENT VERSION OF THE NATIVE CODE COMPILER (SEE SCREEN       TWO) MUST BE USED TO GENERATE APPLICATION PROGRAMS.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \ TRANSIENT LOADING OF NATIVE CODE COMPILE       23:16 10/08/92   4 LOAD                 \ If transient module words are needed   FORTH DEFINITIONS DECIMAL                                     5500 13000 BEGIN-MOD      \ Room for NCC                        BGET NCCTEMP             \ Load transient NCC                   ( Any MACROs should be loaded at this point )                   END-MOD                  \ Resident part                        : XXX ;                  \ Place marker for "FORGET-MOD"        6 LOAD           \ The run support package must be resident     NCC              \ PRINT IDENTIFICATION                         CR                                                              .( LOAD APPLICATION WORDS WHICH USE THE NATIVE CODE COMPILER )  CR                                                              .( AND THEN EXECUTE "FORGET-MOD" )                              CR                                                                                                                              \ INTERPRETER COMPATIBILITY                      21:25 11/24/86 : << ( n cnt --- lshifted-n ) 0 ?DO 2* LOOP ;                   : >> ( n cnt --- rshifted-n ) 0 ?DO 2/ LOOP ;                   : ARRAY  CREATE  2* ALLOT DOES> SWAP 2* + ;                     : CARRAY CREATE  ALLOT DOES> + ;                                : CONTROL BL WORD 1+ C@ 31 AND STATE @ IF [COMPILE] LITERAL            THEN ;  IMMEDIATE                                        : C<-  SWAP C! ;                                                : <-   SWAP ! ;                                                 : [HEX] HEX ; IMMEDIATE  : [DECIMAL] DECIMAL ; IMMEDIATE        : COMPILE: : ;                                                  : SUBR: : ;                                                     : CDOES> [COMPILE] DOES> ; IMMEDIATE                            : ?LEAVE [COMPILE] IF [COMPILE] LEAVE [COMPILE] THEN ;             IMMEDIATE                                                    7 LOAD ( macro )                                                \ Transient modules, continued                   17:28 11/17/86 FORTH DEFINITIONS DECIMAL                                                                                                       0 EQU OLDDP \ Saved DP value                                    0 EQU OLDHP \ Saved HP value                                    0 EQU OLDCP \ Saved CP value                                    0 EQU ENDHP \ HP value saved at end of module                                                                                   ( codeLength dataLength --- )                                   : BEGIN-MOD    HERE EQU OLDDP       \ save the old DP                   HP @ EQU OLDHP              \ to excise headers                 CP @ EQU OLDCP              \ save the old CP                   LIMIT 500 - SWAP - DP !     \ space for PAD and STACK           CLIMIT SWAP - CP !  ;                                   -->                                                                                                                             \ Transient modules, continued                   17:28 11/17/86 ( --- )                                                         : END-MOD  OLDDP  DP !   \ restore old DP and CP                           OLDCP  CP !                                                     HP @ EQU ENDHP ; \ save current HP value             ( --- )                                                         : FORGET-MOD  ( excise unnecessary headers )                         HS0 ENDHP HS0 OLDHP  HP @ ENDHP - CMOVEL \ shift headers        OLDHP ENDHP -  HP +!   \ update header pointer                  INIT_HASH BUILD_HASH ; \ rehash                                                                                            EXCISE OLDDP ENDHP                                                                                                                                                                                                                                                                                                              \ RUN TIME SUPPORT ROUTINES                      17:23 11/24/86 HEX                                                             label  INDRET   0AD CSC,                                        8B CSC, 76 CSC, 0 CSC, 45 CSC, 45 CSC,  0FF CSC, 0E0 CSC,       label (ARRAY)                                                   01 CSC, 0DB CSC, 01 CSC, 0FB CSC, 0AD CSC, 0FF CSC, 0E0 CSC,    label (CARRAY)                                                  01 CSC, 0FB CSC, 0AD CSC, 0FF CSC, 0E0 CSC,                     FORTH DEFINITIONS DECIMAL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \ MACRO                                          10:28 03/17/87 : MACRO  CREATE  IMMEDIATE          \ new word is immediate          ASCII ~ WORD  C@ 1+ ALLOT \ the string                          DOES> COUNT                                                        SOURCE >R >R  >IN @ >R  BLK @ >R \ save load state              >IN OFF BLK OFF  \ reset position                               2EQU SOURCE      \ input buffer                                 INTERPRET        \ interpret contents                           R> ?DUP IF LSOURCE THEN \ reload buffer if necessary            R> >IN !         \ restore load state                           R> R> 2EQU SOURCE ;                                                                                                     ( This version of MACRO will not work with the native             code compiler, but is provided for compatibility )                                                                                                                                            ( BYTE MAGAZINE BENCHMARK )                                     8190 CONSTANT SIZE  VARIABLE FLAGS   SIZE ALLOT                 COMPILE: DO-PRIME  FLAGS SIZE 1 FILL                                        0 SIZE 0                                                        DO  FLAGS  I + C@                                                   IF I 2*  3 +  DUP I +                                                   BEGIN  DUP SIZE <                                               WHILE  0 OVER FLAGS + C!  OVER + REPEAT                         DROP DROP 1+                                            THEN                                                        LOOP                                                        .                                                       ;                                                               : BENCH !TIMER  10 0 DO DO-PRIME LOOP .TIMER ;                                                                                                                                                  ( INTERFACE AGE Magazine Benchmark program )                    COMPILE: BENCH !TIMER DUP 2/ 1+ SWAP  CR                                1 DO DUP I 1 ROT                                                  2 DO DROP DUP I /MOD                                               DUP 0= IF DROP DROP 1 LEAVE                                       ELSE 1 = IF DROP 1                                                ELSE DUP 0> IF DROP 1                                             ELSE 0= IF 0 LEAVE                                                THEN                                                          THEN                                                          THEN                                                          THEN                                                          LOOP                                                       IF 4 .R ELSE DROP THEN                                          LOOP DROP CR .TIMER ;                                   \ EXECUTE WITH " 1000 BENCH"                                    ( BENCHMARKS FROM FORTH DIMENSIONS III/1, PAGE 11 )             HEX                                                                                                                             COMPILE: LOOPTEST   7FFF 0 DO LOOP ;                            COMPILE: -TEST 7FFF 0 DO I DUP - DROP LOOP ;                    COMPILE: *TEST 7FFF 0 DO I DUP * DROP LOOP ;                    COMPILE: /TEST 7FFF 1 DO 7FFF I / DROP LOOP ;                   COMPILE: MOVETEST  7FFF 0 DO 2 @ 2 ! LOOP ;                     COMPILE: COMPTEST  7FFF 0 DO I 4000 < IF  ELSE  THEN LOOP ;     COMPILE: FIELDTEST 0 7FFF 0 DO I 0F AND 10 * 6000 OR + LOOP                        DROP ;                                       : MANY ( #times <wordto execute> -- ) !TIMER                            ' SWAP 0 DO DUP EXECUTE LOOP DROP                               .TIMER   ;                                              DECIMAL                                                                                                                         \ BENCHMARK RESULTS  10 MHz 80286, 1 wait state  18:57 03/03/87 Benchmark      UR/Forth    UR/Forth NCC                         BYTE             8.18           1.50 **                         1000 BENCH       3.24           0.93                            LOOPTEST        0.131           0.049                           -TEST           0.483           0.135                           *TEST           0.538           0.173                           /TEXT           0.620           0.267                           MOVETEST        0.500           0.093                           COMPTEST        0.630           0.143                           FIELDTEST       0.928           0.235                                                                                           ** With the version on screen 12,  1.26 seconds                    ( But is 10.1 sec with UR/Forth )                                                                                                                                                            ( BYTE MAGAZINE BENCHMARK )                                     ( MODIFIED FOR OPTIMAL PERFORMANCE -- USE ONLY FOR COMPARISON     TO OTHER LANGUAGES )                                          8190 CONSTANT SIZE  VARIABLE FLAGS   SIZE ALLOT                 COMPILE: DO-PRIME  FLAGS SIZE 1 FILL                                        0 SIZE 0                                                        DO  FLAGS  I + C@                                                   IF I 2*  3 + DUP I +  FLAGS +                                           BEGIN  DUP SIZE FLAGS + U<                                      WHILE  DUP 0 C<- OVER + REPEAT                                  DROP DROP 1+                                            THEN                                                        LOOP                                                        .          ;                                            : BENCH !TIMER 10 0 DO DO-PRIME LOOP .TIMER ;                                                                                   